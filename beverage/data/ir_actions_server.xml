<?xml version='1.0' encoding='UTF-8'?>
<odoo>
    <record id="studio_customization.execute_code_9f1bcf56-a7d4-4f1b-b82b-97bcacece564" model="ir.actions.server">
        <field name="code"><![CDATA[if record.x_studio_quantity_by_deposit_product == 1 and record.x_studio_unit_sale_product.id:
        raise UserError("Unit sale product should be undefined if this product can not be sold in a smaller unit.")
if record.x_studio_unit_sale_product:
        existing_bom = env['mrp.bom'].search([('product_tmpl_id', '=',record.x_studio_unit_sale_product.product_tmpl_id.id)], limit=1)
        reordering_rule = env['stock.warehouse.orderpoint'].search([('product_id', '=', record.x_studio_unit_sale_product.id)], limit=1)
        bom_vals = {
                'product_qty': record.x_studio_quantity_by_deposit_product,
                'type': 'normal',
                'x_studio_parent_product': record.id,
                'x_studio_auto_production':True,
                'bom_line_ids': [(5, 0), (0, 0, {
                        'product_id': record.product_variant_id.id,
                        'product_qty': 1,
                })],
        }
        if record.x_studio_deposit_product:
                bom_vals['byproduct_ids'] = [(5, 0), (0, 0, {
                        'product_id': record.x_studio_deposit_product.product_variant_id.id,
                        'product_qty': 1.0,
                })]
        if existing_bom:
                existing_bom.write(bom_vals)
        else:
                bom_vals['product_tmpl_id'] = record.x_studio_unit_sale_product.product_tmpl_id.id
                env['mrp.bom'].create(bom_vals)
        rule_vals = {
                'product_id': record.x_studio_unit_sale_product.id,
                'x_studio_parent_product': record.id,
                'product_min_qty': 0,
                'product_max_qty': 0,
                'qty_multiple': record.x_studio_quantity_by_deposit_product or 1,
                'route_id': env.ref('mrp.route_warehouse0_manufacture').id,
                'location_id': env.ref('stock.stock_location_stock').id,
        }
        if not reordering_rule:
                env['stock.warehouse.orderpoint'].create(rule_vals)
else:
        existing_bom = env['mrp.bom'].search([('x_studio_parent_product', '=',record.id)], limit=1)
        reordering_rule = env['stock.warehouse.orderpoint'].search([('x_studio_parent_product', '=', record.id)], limit=1)        
        if existing_bom:
                existing_bom.unlink()
        if reordering_rule:
                reordering_rule.unlink()]]></field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="state">code</field>
        <field name="name">Execute Code</field>
    </record>
    <record id="studio_customization.execute_code_d6dd4860-4e84-403a-8d17-208920cd3e7c" model="ir.actions.server">
        <field name="code"><![CDATA[product_taxe = record.taxes_id
supplier_taxe = record.supplier_taxes_id
taxes = env['account.tax'].search([('tax_group_id.name', '=', 'Deposit')])
product_taxe -= taxes
supplier_taxe -= taxes
if record.x_studio_deposit_product_1:
        product_taxe += record.x_studio_deposit_product_1.taxes_id
        supplier_taxe += record.x_studio_deposit_product_1.supplier_taxes_id
        
record['taxes_id'] = [(6,0, (product_taxe).ids)]
record['supplier_taxes_id'] = [(6,0, (supplier_taxe).ids)]]]></field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="state">code</field>
        <field name="name">Execute Code</field>
    </record>
    <record id="mrp.action_production_order_mark_done" model="ir.actions.server">
        <field name="binding_model_id" ref="mrp.model_mrp_production"/>
        <field name="binding_view_types">list</field>
        <field name="code"><![CDATA[
                        if records:
                                res = records.filtered(lambda mo: mo.state in {'confirmed', 'to_close', 'progress'}).button_mark_done()
                                if res is not True:
                                        action = res
                        ]]></field>
        <field name="model_id" ref="mrp.model_mrp_production"/>
        <field name="state">code</field>
        <field name="name">Mark as Done</field>
    </record>
    <record id="studio_customization.update_state_6f3ebb6a-12bc-462b-87e4-71d5d7a8715a" model="ir.actions.server">
        <field name="child_ids" eval="[(6, 0, [ref('mrp.action_production_order_mark_done')])]"/>
        <field name="model_id" ref="mrp.model_mrp_production"/>
        <field name="state">multi</field>
        <field name="name">Execute Existing Actions</field>
    </record>
    <record id="account.action_account_confirm_payments" model="ir.actions.server">
        <field name="binding_model_id" ref="account.model_account_payment"/>
        <field name="binding_view_types">list</field>
        <field name="code"><![CDATA[
                                records.action_post()
                        ]]></field>
        <field name="model_id" ref="account.model_account_payment"/>
        <field name="state">code</field>
        <field name="name">Post Payments</field>
    </record>
    <record id="account.action_account_invoice_from_list" model="ir.actions.server">
        <field name="binding_model_id" ref="account.model_account_move"/>
        <field name="binding_view_types">list</field>
        <field name="code"><![CDATA[
                                if records:
                                        action = records.action_register_payment()
                        ]]></field>
        <field name="model_id" ref="account.model_account_move"/>
        <field name="state">code</field>
        <field name="name">Register Payment</field>
    </record>
    <record id="account.action_automatic_entry_change_account" model="ir.actions.server">
        <field name="binding_model_id" ref="account.model_account_move_line"/>
        <field name="code"><![CDATA[action = records.action_automatic_entry('change_account')]]></field>
        <field name="model_id" ref="account.model_account_move_line"/>
        <field name="state">code</field>
        <field name="name">Move to Account</field>
    </record>
    <record id="account.action_automatic_entry_change_period" model="ir.actions.server">
        <field name="binding_model_id" ref="account.model_account_move_line"/>
        <field name="code"><![CDATA[action = records.action_automatic_entry('change_period')]]></field>
        <field name="model_id" ref="account.model_account_move_line"/>
        <field name="state">code</field>
        <field name="name">Change Period</field>
    </record>
    <record id="account.action_check_hash_integrity" model="ir.actions.server">
        <field name="code"><![CDATA[
                                action = env.company._action_check_hash_integrity()
                        ]]></field>
        <field name="model_id" ref="base.model_res_company"/>
        <field name="state">code</field>
        <field name="name">Data Inalterability Check</field>
    </record>
    <record id="account.action_move_switch_move_type" model="ir.actions.server">
        <field name="binding_model_id" ref="account.model_account_move"/>
        <field name="binding_view_types">form</field>
        <field name="code"><![CDATA[
if records:
        action = records.action_switch_move_type()
                        ]]></field>
        <field name="model_id" ref="account.model_account_move"/>
        <field name="state">code</field>
        <field name="name">Switch into invoice/credit note</field>
    </record>
    <record id="account.action_new_bank_setting" model="ir.actions.server">
        <field name="code"><![CDATA[
action = model.setting_init_bank_account_action()
                        ]]></field>
        <field name="model_id" ref="base.model_res_company"/>
        <field name="state">code</field>
        <field name="name">Add a Bank Account</field>
    </record>
    <record id="account.invoice_send" model="ir.actions.server">
        <field name="binding_model_id" ref="account.model_account_move"/>
        <field name="binding_view_types">list</field>
        <field name="code"><![CDATA[
                        if records:
                                action = records.action_send_and_print()
                ]]></field>
        <field name="model_id" ref="account.model_account_move"/>
        <field name="state">code</field>
        <field name="name">Send &amp; Print</field>
    </record>
    <record id="account.ir_cron_account_move_send_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._cron_account_move_send(job_count=20)]]></field>
        <field name="model_id" ref="account.model_account_move"/>
        <field name="state">code</field>
        <field name="name">Send invoices automatically</field>
    </record>
    <record id="account.ir_cron_auto_post_draft_entry_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._autopost_draft_entries()]]></field>
        <field name="model_id" ref="account.model_account_move"/>
        <field name="state">code</field>
        <field name="name">Account: Post draft entries with auto_post enabled and accounting date up to today</field>
    </record>
    <record id="account.model_account_move_action_share" model="ir.actions.server">
        <field name="binding_model_id" ref="account.model_account_move"/>
        <field name="binding_view_types">form</field>
        <field name="code"><![CDATA[action = records.action_share()]]></field>
        <field name="model_id" ref="account.model_account_move"/>
        <field name="state">code</field>
        <field name="name">Share</field>
    </record>
    <record id="account_accountant.action_bank_statement_attachment" model="ir.actions.server">
        <field name="binding_model_id" ref="account.model_account_bank_statement"/>
        <field name="binding_type">report</field>
        <field name="code"><![CDATA[
if records:
        action = records.action_generate_attachment()
                        ]]></field>
        <field name="model_id" ref="account.model_account_bank_statement"/>
        <field name="state">code</field>
        <field name="name">Statement</field>
    </record>
    <record id="account_accountant.auto_reconcile_bank_statement_line_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._cron_try_auto_reconcile_statement_lines(batch_size=100)]]></field>
        <field name="model_id" ref="account.model_account_bank_statement_line"/>
        <field name="state">code</field>
        <field name="name">Try to reconcile automatically your statement lines</field>
    </record>
    <record id="account_auto_transfer.ir_cron_auto_transfer_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model.action_cron_auto_transfer()]]></field>
        <field name="model_id" ref="account_auto_transfer.model_account_transfer_model"/>
        <field name="state">code</field>
        <field name="name">Account automatic transfers: Perform transfers</field>
    </record>
    <record id="account_followup.action_account_reports_customer_statements_do_followup" model="ir.actions.server">
        <field name="binding_model_id" ref="base.model_res_partner"/>
        <field name="code"><![CDATA[
                                if records:
                                        action = records.action_manually_process_automatic_followups()
                        ]]></field>
        <field name="model_id" ref="base.model_res_partner"/>
        <field name="state">code</field>
        <field name="name">Process Automatic Follow-ups</field>
    </record>
    <record id="account_followup.ir_cron_auto_post_draft_entry_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._cron_execute_followup()]]></field>
        <field name="model_id" ref="base.model_res_partner"/>
        <field name="state">code</field>
        <field name="name">Account Report Followup; Execute followup</field>
    </record>
    <record id="account_invoice_extract.ir_cron_ocr_validate_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._cron_validate()]]></field>
        <field name="model_id" ref="account.model_account_move"/>
        <field name="state">code</field>
        <field name="name">Invoice OCR: Validate Invoices</field>
    </record>
    <record id="account_invoice_extract.ir_cron_update_ocr_status_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model.check_all_status()]]></field>
        <field name="model_id" ref="account.model_account_move"/>
        <field name="state">code</field>
        <field name="name">Invoice OCR: Update All Status</field>
    </record>
    <record id="account_invoice_extract.model_account_send_for_digitalization" model="ir.actions.server">
        <field name="binding_model_id" ref="account.model_account_move"/>
        <field name="binding_view_types">list</field>
        <field name="code"><![CDATA[
                                if records:
                                        action = records.action_send_batch_for_digitization()
                        ]]></field>
        <field name="model_id" ref="account.model_account_move"/>
        <field name="state">code</field>
        <field name="name">Send Bills for digitization</field>
    </record>
    <record id="account_online_synchronization.account_journal_action_fetch_missing_transactions" model="ir.actions.server">
        <field name="binding_model_id" ref="account.model_account_journal"/>
        <field name="binding_view_types">form</field>
        <field name="code"><![CDATA[
                                if record:
                                        action = record.action_open_missing_transaction_wizard()
                        ]]></field>
        <field name="model_id" ref="account.model_account_journal"/>
        <field name="state">code</field>
        <field name="name">Find Missing Transactions</field>
    </record>
    <record id="account_online_synchronization.online_sync_cron_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._cron_fetch_online_transactions()]]></field>
        <field name="model_id" ref="account.model_account_journal"/>
        <field name="state">code</field>
        <field name="name">Account: Journal online sync</field>
    </record>
    <record id="account_online_synchronization.online_sync_cron_waiting_synchronization_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._cron_fetch_waiting_online_transactions()]]></field>
        <field name="model_id" ref="account.model_account_journal"/>
        <field name="state">code</field>
        <field name="name">Account: Journal online Waiting Synchronization</field>
    </record>
    <record id="account_online_synchronization.online_sync_mail_cron_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._cron_send_reminder_email()]]></field>
        <field name="model_id" ref="account.model_account_journal"/>
        <field name="state">code</field>
        <field name="name">Account: Journal online sync reminder</field>
    </record>
    <record id="account_online_synchronization.online_sync_unused_connection_cron_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._cron_delete_unused_connection()]]></field>
        <field name="model_id" ref="account_online_synchronization.model_account_online_link"/>
        <field name="state">code</field>
        <field name="name">Account: Journal online sync cleanup unused connections</field>
    </record>
    <record id="auth_signup.action_send_password_reset_instructions" model="ir.actions.server">
        <field name="binding_model_id" ref="base.model_res_users"/>
        <field name="code"><![CDATA[records.action_reset_password()]]></field>
        <field name="model_id" ref="base.model_res_users"/>
        <field name="state">code</field>
        <field name="name">Send Password Reset Instructions</field>
    </record>
    <record id="auth_signup.ir_cron_auth_signup_send_pending_user_reminder_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model.send_unregistered_user_reminder(batch_size=100)]]></field>
        <field name="model_id" ref="base.model_res_users"/>
        <field name="state">code</field>
        <field name="name">Users: Notify About Unregistered Users</field>
    </record>
    <record id="auth_totp.action_disable_totp" model="ir.actions.server">
        <field name="binding_model_id" ref="base.model_res_users"/>
        <field name="code"><![CDATA[
                        action = records.action_totp_disable()
                ]]></field>
        <field name="model_id" ref="base.model_res_users"/>
        <field name="state">code</field>
        <field name="name">Disable two-factor authentication</field>
    </record>
    <record id="auth_totp_mail.action_activate_two_factor_authentication" model="ir.actions.server">
        <field name="code"><![CDATA[
user = env.user
action = user.action_open_my_account_settings()
                ]]></field>
        <field name="model_id" ref="base.model_res_users"/>
        <field name="state">code</field>
        <field name="name">Open two-factor authentication configuration</field>
    </record>
    <record id="auth_totp_mail.action_invite_totp" model="ir.actions.server">
        <field name="binding_model_id" ref="base.model_res_users"/>
        <field name="binding_view_types">list</field>
        <field name="code"><![CDATA[
                        action = records.action_totp_invite()
                ]]></field>
        <field name="model_id" ref="base.model_res_users"/>
        <field name="state">code</field>
        <field name="name">Invite to use two-factor authentication</field>
    </record>
    <record id="base.action_run_ir_action_todo" model="ir.actions.server">
        <field name="code"><![CDATA[
config = model.next() or {}
if config.get('type') not in ('ir.actions.act_window_close',):
        action = config
]]></field>
        <field name="model_id" ref="base.model_res_config"/>
        <field name="state">code</field>
        <field name="name">Config: Run Remaining Action Todo</field>
    </record>
    <record id="base.autovacuum_job_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._run_vacuum_cleaner()]]></field>
        <field name="model_id" ref="base.model_ir_autovacuum"/>
        <field name="state">code</field>
        <field name="name">Base: Auto-vacuum internal data</field>
    </record>
    <record id="base.demo_failure_action" model="ir.actions.server">
        <field name="code"><![CDATA[
failures = env['ir.demo_failure'].search([
        ('wizard_id', '=', False),
])
record = model.create({
        'failure_ids': [Command.set(failures.ids)],
})
action = {
        'type': 'ir.actions.act_window',
        'res_id': record.id,
        'res_model': 'ir.demo_failure.wizard',
        'target': 'new',
        'views': [(env.ref('base.demo_failures_dialog').id, 'form')],
}
                ]]></field>
        <field name="model_id" ref="base.model_ir_demo_failure_wizard"/>
        <field name="state">code</field>
        <field name="name">Failed to install demo data for some modules, demo disabled</field>
    </record>
    <record id="base.ir_cron_res_users_deletion_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._gc_portal_users(batch_size=50)]]></field>
        <field name="model_id" ref="base.model_res_users_deletion"/>
        <field name="state">code</field>
        <field name="name">Base: Portal Users Deletion</field>
    </record>
    <record id="base_automation.ir_cron_data_base_automation_check_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._check(True)]]></field>
        <field name="model_id" ref="base_automation.model_base_automation"/>
        <field name="state">code</field>
        <field name="name">Automation Rules: check and execute</field>
    </record>
    <record id="calendar.ir_cron_scheduler_alarm_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._send_reminder()]]></field>
        <field name="model_id" ref="calendar.model_calendar_alarm_manager"/>
        <field name="state">code</field>
        <field name="name">Calendar: Event Reminder</field>
    </record>
    <record id="crm.action_opportunity_forecast" model="ir.actions.server">
        <field name="code"><![CDATA[action = model.action_opportunity_forecast()]]></field>
        <field name="model_id" ref="sales_team.model_crm_team"/>
        <field name="state">code</field>
        <field name="name">Crm: Forecast</field>
    </record>
    <record id="crm.action_your_pipeline" model="ir.actions.server">
        <field name="code"><![CDATA[action = model.action_your_pipeline()]]></field>
        <field name="model_id" ref="sales_team.model_crm_team"/>
        <field name="state">code</field>
        <field name="name">Crm: My Pipeline</field>
    </record>
    <record id="crm.ir_cron_crm_lead_assign_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._cron_assign_leads()]]></field>
        <field name="model_id" ref="sales_team.model_crm_team"/>
        <field name="state">code</field>
        <field name="name">CRM: Lead Assignment</field>
    </record>
    <record id="crm.website_crm_score_cron_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._cron_update_automated_probabilities()]]></field>
        <field name="model_id" ref="crm.model_crm_lead"/>
        <field name="state">code</field>
        <field name="name">Predictive Lead Scoring: Recompute Automated Probabilities</field>
    </record>
    <record id="crm_iap_enrich.action_enrich_mail" model="ir.actions.server">
        <field name="binding_model_id" ref="crm.model_crm_lead"/>
        <field name="code"><![CDATA[     
        if records:
                records.iap_enrich()
                        ]]></field>
        <field name="model_id" ref="crm.model_crm_lead"/>
        <field name="state">code</field>
        <field name="name">Enrich</field>
    </record>
    <record id="crm_iap_enrich.ir_cron_lead_enrichment_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._iap_enrich_leads_cron()]]></field>
        <field name="model_id" ref="crm.model_crm_lead"/>
        <field name="state">code</field>
        <field name="name">CRM: enrich leads (IAP)</field>
    </record>
    <record id="currency_rate_live.ir_cron_currency_update_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model.run_update_currency()]]></field>
        <field name="model_id" ref="base.model_res_company"/>
        <field name="state">code</field>
        <field name="name">Currency: rate update</field>
    </record>
    <record id="digest.ir_cron_digest_scheduler_action_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._cron_send_digest_email()]]></field>
        <field name="model_id" ref="digest.model_digest_digest"/>
        <field name="state">code</field>
        <field name="name">Digest Emails</field>
    </record>
    <record id="gamification.ir_cron_check_challenge_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._cron_update()]]></field>
        <field name="model_id" ref="gamification.model_gamification_challenge"/>
        <field name="state">code</field>
        <field name="name">Gamification: Goal Challenge Check</field>
    </record>
    <record id="gamification.ir_cron_consolidate_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._consolidate_cron()]]></field>
        <field name="model_id" ref="gamification.model_gamification_karma_tracking"/>
        <field name="state">code</field>
        <field name="name">Gamification: Karma tracking consolidation</field>
    </record>
    <record id="hr.action_hr_employee_create_user" model="ir.actions.server">
        <field name="binding_model_id" ref="hr.model_hr_employee"/>
        <field name="binding_view_types">form</field>
        <field name="code"><![CDATA[
                                action = records.action_create_user()
                        ]]></field>
        <field name="model_id" ref="hr.model_hr_employee"/>
        <field name="state">code</field>
        <field name="name">Create User</field>
    </record>
    <record id="hr.ir_cron_data_check_work_permit_validity_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._cron_check_work_permit_validity()]]></field>
        <field name="model_id" ref="hr.model_hr_employee"/>
        <field name="state">code</field>
        <field name="name">HR Employee: check work permit validity</field>
    </record>
    <record id="hr_skills.action_open_skills_log_department" model="ir.actions.server">
        <field name="binding_model_id" ref="hr.model_hr_department"/>
        <field name="binding_view_types">form</field>
        <field name="code"><![CDATA[
action = env['ir.actions.act_window']._for_xml_id('hr_skills.action_hr_employee_skill_log_department')
action['domain'] = [('department_id', '=', record.id)]
                ]]></field>
        <field name="model_id" ref="hr.model_hr_department"/>
        <field name="state">code</field>
        <field name="name">Skill History Report</field>
    </record>
    <record id="hr_skills.action_print_employees_cv" model="ir.actions.server">
        <field name="binding_model_id" ref="hr.model_hr_employee"/>
        <field name="binding_type">report</field>
        <field name="code"><![CDATA[
action = env['ir.actions.act_window']._for_xml_id('hr_skills.action_hr_employee_cv_wizard')
                ]]></field>
        <field name="model_id" ref="hr.model_hr_employee"/>
        <field name="state">code</field>
        <field name="name">Print Resume</field>
    </record>
    <record id="knowledge.ir_actions_server_knowledge_home_page" model="ir.actions.server">
        <field name="code"><![CDATA[action = model.action_home_page()]]></field>
        <field name="model_id" ref="knowledge.model_knowledge_article"/>
        <field name="state">code</field>
        <field name="name">Articles</field>
    </record>
    <record id="mail.ir_cron_delete_notification_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._gc_notifications(max_age_days=180)]]></field>
        <field name="model_id" ref="mail.model_mail_notification"/>
        <field name="state">code</field>
        <field name="name">Notification: Delete Notifications older than 6 Month</field>
    </record>
    <record id="mail.ir_cron_discuss_channel_member_unmute_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._unmute()]]></field>
        <field name="model_id" ref="mail.model_discuss_channel_member"/>
        <field name="state">code</field>
        <field name="name">Discuss: channel member unmute</field>
    </record>
    <record id="mail.ir_cron_discuss_users_settings_unmute_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._cleanup_expired_mutes()]]></field>
        <field name="model_id" ref="base.model_res_users_settings"/>
        <field name="state">code</field>
        <field name="name">Discuss: users settings unmute</field>
    </record>
    <record id="mail.ir_cron_mail_gateway_action_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._fetch_mails()]]></field>
        <field name="model_id" ref="mail.model_fetchmail_server"/>
        <field name="state">code</field>
        <field name="name">Mail: Fetchmail Service</field>
    </record>
    <record id="mail.ir_cron_mail_scheduler_action_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model.process_email_queue(batch_size=1000)]]></field>
        <field name="model_id" ref="mail.model_mail_mail"/>
        <field name="state">code</field>
        <field name="name">Mail: Email Queue Manager</field>
    </record>
    <record id="mail.ir_cron_module_update_notification_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model.update_notification(None)]]></field>
        <field name="model_id" ref="mail.model_publisher_warranty_contract"/>
        <field name="state">code</field>
        <field name="name">Publisher: Update Notification</field>
    </record>
    <record id="mail.ir_cron_send_scheduled_message_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._send_notifications_cron()]]></field>
        <field name="model_id" ref="mail.model_mail_message_schedule"/>
        <field name="state">code</field>
        <field name="name">Notification: Send scheduled message notifications</field>
    </record>
    <record id="mail.ir_cron_web_push_notification_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._push_notification_to_endpoint()]]></field>
        <field name="model_id" ref="mail.model_mail_push"/>
        <field name="state">code</field>
        <field name="name">Mail: send web push notification</field>
    </record>
    <record id="mrp.action_plan_with_components_availability" model="ir.actions.server">
        <field name="binding_model_id" ref="mrp.model_mrp_production"/>
        <field name="code"><![CDATA[action = records.action_plan_with_components_availability()]]></field>
        <field name="model_id" ref="mrp.model_mrp_production"/>
        <field name="state">code</field>
        <field name="name">Plan based on Components Availability</field>
    </record>
    <record id="mrp.action_print_labels" model="ir.actions.server">
        <field name="binding_model_id" ref="mrp.model_mrp_production"/>
        <field name="binding_type">report</field>
        <field name="binding_view_types">form</field>
        <field name="code"><![CDATA[
                        if records:
                                action = records.action_open_label_type()]]></field>
        <field name="model_id" ref="mrp.model_mrp_production"/>
        <field name="state">code</field>
        <field name="name">Print Labels</field>
    </record>
    <record id="mrp.action_production_order_lock_unlock" model="ir.actions.server">
        <field name="binding_model_id" ref="mrp.model_mrp_production"/>
        <field name="binding_view_types">form</field>
        <field name="code"><![CDATA[
                        if records:
                                records.action_toggle_is_locked()]]></field>
        <field name="model_id" ref="mrp.model_mrp_production"/>
        <field name="state">code</field>
        <field name="name">Lock/Unlock</field>
    </record>
    <record id="mrp.action_production_order_merge" model="ir.actions.server">
        <field name="binding_model_id" ref="mrp.model_mrp_production"/>
        <field name="binding_view_types">list</field>
        <field name="code"><![CDATA[action = records.action_merge()]]></field>
        <field name="model_id" ref="mrp.model_mrp_production"/>
        <field name="state">code</field>
        <field name="name">Merge</field>
    </record>
    <record id="mrp.action_production_order_scrap" model="ir.actions.server">
        <field name="binding_model_id" ref="mrp.model_mrp_production"/>
        <field name="binding_view_types">form</field>
        <field name="code"><![CDATA[
                        if records:
                                action = records.button_scrap()]]></field>
        <field name="model_id" ref="mrp.model_mrp_production"/>
        <field name="state">code</field>
        <field name="name">Scrap</field>
    </record>
    <record id="mrp.action_production_order_split" model="ir.actions.server">
        <field name="binding_model_id" ref="mrp.model_mrp_production"/>
        <field name="code"><![CDATA[action = records.action_split()]]></field>
        <field name="model_id" ref="mrp.model_mrp_production"/>
        <field name="state">code</field>
        <field name="name">Split</field>
    </record>
    <record id="mrp.mrp_production_action_unreserve_tree" model="ir.actions.server">
        <field name="binding_model_id" ref="mrp.model_mrp_production"/>
        <field name="binding_view_types">list</field>
        <field name="code"><![CDATA[
                        if records:
                                records.do_unreserve()
                        ]]></field>
        <field name="model_id" ref="mrp.model_mrp_production"/>
        <field name="state">code</field>
        <field name="name">Unreserve</field>
    </record>
    <record id="mrp_account.action_compute_price_bom_product" model="ir.actions.server">
        <field name="binding_model_id" ref="product.model_product_product"/>
        <field name="binding_view_types">list</field>
        <field name="code"><![CDATA[
                        if records:
                                records.action_bom_cost()
                        ]]></field>
        <field name="model_id" ref="product.model_product_product"/>
        <field name="state">code</field>
        <field name="name">Compute Price from BoM</field>
    </record>
    <record id="mrp_account.action_compute_price_bom_template" model="ir.actions.server">
        <field name="binding_model_id" ref="product.model_product_template"/>
        <field name="binding_view_types">list</field>
        <field name="code"><![CDATA[
                        if records:
                                records.action_bom_cost()
                        ]]></field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="state">code</field>
        <field name="name">Compute Price from BoM</field>
    </record>
    <record id="mrp_workorder.action_mrp_workorder_dependencies_production" model="ir.actions.server">
        <field name="code"><![CDATA[
                        action = model.action_mrp_workorder_dependencies('production')
                ]]></field>
        <field name="model_id" ref="mrp.model_mrp_workorder"/>
        <field name="state">code</field>
        <field name="name">Work Orders Planning</field>
    </record>
    <record id="mrp_workorder.action_mrp_workorder_dependencies_workcenter" model="ir.actions.server">
        <field name="code"><![CDATA[
                        action = model.action_mrp_workorder_dependencies('workcenter')
                ]]></field>
        <field name="model_id" ref="mrp.model_mrp_workorder"/>
        <field name="state">code</field>
        <field name="name">Work Orders Planning</field>
    </record>
    <record id="mrp_workorder.action_view_mrp_overview" model="ir.actions.server">
        <field name="code"><![CDATA[
                        action = model.action_mrp_overview()
                ]]></field>
        <field name="model_id" ref="stock.model_stock_picking_type"/>
        <field name="state">code</field>
        <field name="name">Overview</field>
    </record>
    <record id="mrp_workorder.production_order_unplan_server_action" model="ir.actions.server">
        <field name="binding_model_id" ref="mrp.model_mrp_production"/>
        <field name="binding_view_types">list</field>
        <field name="code"><![CDATA[records.button_unplan()]]></field>
        <field name="model_id" ref="mrp.model_mrp_production"/>
        <field name="state">code</field>
        <field name="name">Unplan orders</field>
    </record>
    <record id="partner_autocomplete.ir_cron_partner_autocomplete_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model.start_sync(batch_size=1000)]]></field>
        <field name="model_id" ref="partner_autocomplete.model_res_partner_autocomplete_sync"/>
        <field name="state">code</field>
        <field name="name">Partner Autocomplete: Sync with remote DB</field>
    </record>
    <record id="payment.action_activate_stripe" model="ir.actions.server">
        <field name="code"><![CDATA[
action = env.company._run_payment_onboarding_step()
                ]]></field>
        <field name="model_id" ref="payment.model_payment_provider"/>
        <field name="state">code</field>
        <field name="name">Activate Stripe</field>
    </record>
    <record id="payment.cron_post_process_payment_tx_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._cron_post_process()]]></field>
        <field name="model_id" ref="payment.model_payment_transaction"/>
        <field name="state">code</field>
        <field name="name">Payment: Post-process transactions</field>
    </record>
    <record id="point_of_sale.action_send_mail" model="ir.actions.server">
        <field name="binding_model_id" ref="point_of_sale.model_pos_order"/>
        <field name="binding_view_types">tree</field>
        <field name="code"><![CDATA[
                        action = records.action_send_mail()
                ]]></field>
        <field name="model_id" ref="point_of_sale.model_pos_order"/>
        <field name="state">code</field>
        <field name="name">Send Email</field>
    </record>
    <record id="portal.partner_wizard_action_create_and_open" model="ir.actions.server">
        <field name="binding_model_id" ref="base.model_res_partner"/>
        <field name="code"><![CDATA[action = model.action_open_wizard()]]></field>
        <field name="model_id" ref="portal.model_portal_wizard"/>
        <field name="state">code</field>
        <field name="name">Grant portal access</field>
    </record>
    <record id="pos_preparation_display.action_pos_preparation_display_kitchen_display" model="ir.actions.server">
        <field name="code"><![CDATA[
                        action = env.ref('pos_preparation_display.action_pos_preparation_display_bar_restaurant_filter_link').sudo().read()[0]
                ]]></field>
        <field name="model_id" ref="pos_preparation_display.model_pos_preparation_display_display"/>
        <field name="state">code</field>
        <field name="name">Kitchen Display</field>
    </record>
    <record id="pos_preparation_display.preparation_display_delete_cron_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._clean_preparation_data()]]></field>
        <field name="model_id" ref="pos_preparation_display.model_pos_preparation_display_order"/>
        <field name="state">code</field>
        <field name="name">delete_preparation_display_order</field>
    </record>
    <record id="privacy_lookup.ir_action_server_action_privacy_lookup_partner" model="ir.actions.server">
        <field name="binding_model_id" ref="base.model_res_partner"/>
        <field name="binding_view_types">form</field>
        <field name="code"><![CDATA[
action = record.action_privacy_lookup()
                ]]></field>
        <field name="model_id" ref="base.model_res_partner"/>
        <field name="state">code</field>
        <field name="name">Privacy Lookup</field>
    </record>
    <record id="privacy_lookup.ir_action_server_action_privacy_lookup_user" model="ir.actions.server">
        <field name="binding_model_id" ref="base.model_res_users"/>
        <field name="binding_view_types">form</field>
        <field name="code"><![CDATA[
action = record.partner_id.action_privacy_lookup()
                ]]></field>
        <field name="model_id" ref="base.model_res_users"/>
        <field name="state">code</field>
        <field name="name">Privacy Lookup</field>
    </record>
    <record id="privacy_lookup.ir_actions_server_archive_all" model="ir.actions.server">
        <field name="binding_model_id" ref="privacy_lookup.model_privacy_lookup_wizard_line"/>
        <field name="binding_view_types">list</field>
        <field name="code"><![CDATA[
records.action_archive_all()
                ]]></field>
        <field name="model_id" ref="privacy_lookup.model_privacy_lookup_wizard_line"/>
        <field name="state">code</field>
        <field name="name">Archive Selection</field>
    </record>
    <record id="privacy_lookup.ir_actions_server_unlink_all" model="ir.actions.server">
        <field name="binding_model_id" ref="privacy_lookup.model_privacy_lookup_wizard_line"/>
        <field name="binding_view_types">list</field>
        <field name="code"><![CDATA[
records.action_unlink_all()
                ]]></field>
        <field name="model_id" ref="privacy_lookup.model_privacy_lookup_wizard_line"/>
        <field name="state">code</field>
        <field name="name">Delete Selection</field>
    </record>
    <record id="product.action_product_price_list_report" model="ir.actions.server">
        <field name="binding_model_id" ref="product.model_product_product"/>
        <field name="code"><![CDATA[
ctx = env.context
ctx.update({'default_pricelist': env['product.pricelist'].search([], limit=1).id})
action = {
        'name': 'Pricelist Report',
        'type': 'ir.actions.client',
        'tag': 'generate_pricelist_report',
        'context': ctx,
}
                ]]></field>
        <field name="model_id" ref="product.model_product_product"/>
        <field name="state">code</field>
        <field name="name">Generate Pricelist Report</field>
    </record>
    <record id="product.action_product_template_price_list_report" model="ir.actions.server">
        <field name="binding_model_id" ref="product.model_product_template"/>
        <field name="code"><![CDATA[
ctx = env.context
ctx.update({'default_pricelist': env['product.pricelist'].search([], limit=1).id})
action = {
        'name': 'Pricelist Report',
        'type': 'ir.actions.client',
        'tag': 'generate_pricelist_report',
        'context': ctx,
}
                ]]></field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="state">code</field>
        <field name="name">Generate Pricelist Report</field>
    </record>
    <record id="purchase.action_purchase_batch_bills" model="ir.actions.server">
        <field name="binding_model_id" ref="purchase.model_purchase_order"/>
        <field name="code"><![CDATA[
                        if records:
                                action = records.action_create_invoice()
                ]]></field>
        <field name="model_id" ref="purchase.model_purchase_order"/>
        <field name="state">code</field>
        <field name="name">Create Vendor Bills</field>
    </record>
    <record id="purchase.action_purchase_send_reminder" model="ir.actions.server">
        <field name="binding_model_id" ref="purchase.model_purchase_order"/>
        <field name="binding_view_types">form</field>
        <field name="code"><![CDATA[
                        if records:
                                action = records._send_reminder_mail(send_single=True)
                ]]></field>
        <field name="model_id" ref="purchase.model_purchase_order"/>
        <field name="state">code</field>
        <field name="name">Send Reminder</field>
    </record>
    <record id="purchase.model_purchase_order_action_share" model="ir.actions.server">
        <field name="binding_model_id" ref="purchase.model_purchase_order"/>
        <field name="binding_view_types">form</field>
        <field name="code"><![CDATA[action = records.action_share()]]></field>
        <field name="model_id" ref="purchase.model_purchase_order"/>
        <field name="state">code</field>
        <field name="name">Share</field>
    </record>
    <record id="purchase.purchase_send_reminder_mail_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._send_reminder_mail()]]></field>
        <field name="model_id" ref="purchase.model_purchase_order"/>
        <field name="state">code</field>
        <field name="name">Purchase reminder</field>
    </record>
    <record id="sale.model_sale_order_action_quotation_sent" model="ir.actions.server">
        <field name="binding_model_id" ref="sale.model_sale_order"/>
        <field name="binding_view_types">form,list</field>
        <field name="code"><![CDATA[action = records.action_quotation_sent()]]></field>
        <field name="model_id" ref="sale.model_sale_order"/>
        <field name="state">code</field>
        <field name="name">Mark Quotation as Sent</field>
    </record>
    <record id="sale.model_sale_order_action_share" model="ir.actions.server">
        <field name="binding_model_id" ref="sale.model_sale_order"/>
        <field name="binding_view_types">form</field>
        <field name="code"><![CDATA[action = records.action_share()]]></field>
        <field name="model_id" ref="sale.model_sale_order"/>
        <field name="state">code</field>
        <field name="name">Share</field>
    </record>
    <record id="sale.send_invoice_cron_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._cron_send_invoice()]]></field>
        <field name="model_id" ref="payment.model_payment_transaction"/>
        <field name="state">code</field>
        <field name="name">automatic invoicing: send ready invoice</field>
    </record>
    <record id="sale_async_emails.cron_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._cron_send_pending_emails()]]></field>
        <field name="model_id" ref="sale.model_sale_order"/>
        <field name="state">code</field>
        <field name="name">Sales: Send pending emails</field>
    </record>
    <record id="sign.sign_reminder_cron_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._cron_reminder()]]></field>
        <field name="model_id" ref="sign.model_sign_request"/>
        <field name="state">code</field>
        <field name="name">Sign: Send mail reminder</field>
    </record>
    <record id="sign.sign_template_tour_trigger_action" model="ir.actions.server">
        <field name="code"><![CDATA[action = model.trigger_template_tour()]]></field>
        <field name="model_id" ref="sign.model_sign_template"/>
        <field name="state">code</field>
        <field name="name">Template Sample Contract.pdf trigger</field>
    </record>
    <record id="sms.ir_actions_server_sms_sms_resend" model="ir.actions.server">
        <field name="binding_model_id" ref="sms.model_sms_sms"/>
        <field name="binding_view_types">list</field>
        <field name="code"><![CDATA[action = records.resend_failed()]]></field>
        <field name="model_id" ref="sms.model_sms_sms"/>
        <field name="state">code</field>
        <field name="name">Resend</field>
    </record>
    <record id="sms.ir_cron_sms_scheduler_action_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._process_queue()]]></field>
        <field name="model_id" ref="sms.model_sms_sms"/>
        <field name="state">code</field>
        <field name="name">SMS: SMS Queue Manager</field>
    </record>
    <record id="snailmail.snailmail_print_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._snailmail_cron()]]></field>
        <field name="model_id" ref="snailmail.model_snailmail_letter"/>
        <field name="state">code</field>
        <field name="name">Snailmail: process letters queue</field>
    </record>
    <record id="stock.action_install_barcode" model="ir.actions.server">
        <field name="binding_model_id" ref="stock.model_stock_picking_type"/>
        <field name="code"><![CDATA[
                                action = model.action_redirect_to_barcode_installation()
                        ]]></field>
        <field name="model_id" ref="stock.model_stock_picking_type"/>
        <field name="state">code</field>
        <field name="name">Install Barcode</field>
    </record>
    <record id="stock.action_open_routes" model="ir.actions.server">
        <field name="code"><![CDATA[
                                action = model.action_open_routes_diagram()
                        ]]></field>
        <field name="model_id" ref="product.model_product_template"/>
        <field name="state">code</field>
        <field name="name">Routes</field>
    </record>
    <record id="stock.action_print_labels" model="ir.actions.server">
        <field name="binding_model_id" ref="stock.model_stock_picking"/>
        <field name="binding_type">report</field>
        <field name="code"><![CDATA[
                        if records:
                                action = records.action_open_label_type()
                        ]]></field>
        <field name="model_id" ref="stock.model_stock_picking"/>
        <field name="state">code</field>
        <field name="name">Labels</field>
    </record>
    <record id="stock.action_replenishment" model="ir.actions.server">
        <field name="code"><![CDATA[
                        action = model.with_context(
                                search_default_filter_to_reorder=True,
                                search_default_filter_not_snoozed=True,
                                default_trigger='manual',
                                searchpanel_default_trigger='manual'
                        ).action_open_orderpoints()
                ]]></field>
        <field name="model_id" ref="stock.model_stock_warehouse_orderpoint"/>
        <field name="state">code</field>
        <field name="name">Replenishment</field>
    </record>
    <record id="stock.action_revert_inventory_adjustment" model="ir.actions.server">
        <field name="binding_model_id" ref="stock.model_stock_move_line"/>
        <field name="code"><![CDATA[
                        action = records.action_revert_inventory()
                ]]></field>
        <field name="model_id" ref="stock.model_stock_move_line"/>
        <field name="state">code</field>
        <field name="name">Revert Inventory Adjustment</field>
    </record>
    <record id="stock.action_scrap" model="ir.actions.server">
        <field name="binding_model_id" ref="stock.model_stock_picking"/>
        <field name="binding_view_types">form</field>
        <field name="code"><![CDATA[
                        if records:
                                action = records.button_scrap()]]></field>
        <field name="model_id" ref="stock.model_stock_picking"/>
        <field name="state">code</field>
        <field name="name">Scrap</field>
    </record>
    <record id="stock.action_toggle_is_locked" model="ir.actions.server">
        <field name="binding_model_id" ref="stock.model_stock_picking"/>
        <field name="binding_view_types">form</field>
        <field name="code"><![CDATA[
                        if records:
                                records.action_toggle_is_locked()]]></field>
        <field name="model_id" ref="stock.model_stock_picking"/>
        <field name="state">code</field>
        <field name="name">Lock/Unlock</field>
    </record>
    <record id="stock.action_unreserve_picking" model="ir.actions.server">
        <field name="binding_model_id" ref="stock.model_stock_picking"/>
        <field name="code"><![CDATA[
                        if records:
                                records.do_unreserve()
                        ]]></field>
        <field name="model_id" ref="stock.model_stock_picking"/>
        <field name="state">code</field>
        <field name="name">Unreserve</field>
    </record>
    <record id="stock.action_validate_picking" model="ir.actions.server">
        <field name="binding_model_id" ref="stock.model_stock_picking"/>
        <field name="binding_view_types">list</field>
        <field name="code"><![CDATA[
                        if records:
                                res = records.button_validate()
                                if isinstance(res, dict):
                                        action = res
                        ]]></field>
        <field name="model_id" ref="stock.model_stock_picking"/>
        <field name="state">code</field>
        <field name="name">Validate</field>
    </record>
    <record id="stock.action_view_inventory_tree" model="ir.actions.server">
        <field name="code"><![CDATA[
                        action = model.action_view_inventory()
                ]]></field>
        <field name="model_id" ref="stock.model_stock_quant"/>
        <field name="state">code</field>
        <field name="name">Inventory</field>
    </record>
    <record id="stock.action_view_quants" model="ir.actions.server">
        <field name="code"><![CDATA[
                        action = model.with_context(
                                search_default_internal_loc=1,
                                always_show_loc=1,
                        ).action_view_quants()
                ]]></field>
        <field name="model_id" ref="stock.model_stock_quant"/>
        <field name="state">code</field>
        <field name="name">Inventory</field>
    </record>
    <record id="stock.action_view_set_quants_tree" model="ir.actions.server">
        <field name="binding_model_id" ref="stock.model_stock_quant"/>
        <field name="binding_view_types">list</field>
        <field name="code"><![CDATA[
                        action = records.action_set_inventory_quantity()
                ]]></field>
        <field name="model_id" ref="stock.model_stock_quant"/>
        <field name="state">code</field>
        <field name="name">Set to quantity on hand</field>
    </record>
    <record id="stock.action_view_set_to_zero_quants_tree" model="ir.actions.server">
        <field name="binding_model_id" ref="stock.model_stock_quant"/>
        <field name="binding_view_types">list</field>
        <field name="code"><![CDATA[
                        action = records.action_set_inventory_quantity_zero()
                ]]></field>
        <field name="model_id" ref="stock.model_stock_quant"/>
        <field name="state">code</field>
        <field name="name">Set to 0</field>
    </record>
    <record id="stock.ir_cron_scheduler_action_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[
model.run_scheduler(True)
                        ]]></field>
        <field name="model_id" ref="stock.model_procurement_group"/>
        <field name="state">code</field>
        <field name="name">Procurement: run scheduler</field>
    </record>
    <record id="stock.method_action_picking_tree_incoming" model="ir.actions.server">
        <field name="code"><![CDATA[action = model.get_action_picking_tree_incoming()]]></field>
        <field name="model_id" ref="stock.model_stock_picking"/>
        <field name="state">code</field>
        <field name="name">stock.method_action_picking_tree_incoming</field>
    </record>
    <record id="stock.method_action_picking_tree_internal" model="ir.actions.server">
        <field name="code"><![CDATA[action = model.get_action_picking_tree_internal()]]></field>
        <field name="model_id" ref="stock.model_stock_picking"/>
        <field name="state">code</field>
        <field name="name">stock.method_action_picking_tree_internal</field>
    </record>
    <record id="stock.method_action_picking_tree_outgoing" model="ir.actions.server">
        <field name="code"><![CDATA[action = model.get_action_picking_tree_outgoing()]]></field>
        <field name="model_id" ref="stock.model_stock_picking"/>
        <field name="state">code</field>
        <field name="name">stock.method_action_picking_tree_outgoing</field>
    </record>
    <record id="stock.stock_split_picking" model="ir.actions.server">
        <field name="binding_model_id" ref="stock.model_stock_picking"/>
        <field name="binding_view_types">form</field>
        <field name="code"><![CDATA[action = records.action_split_transfer()]]></field>
        <field name="model_id" ref="stock.model_stock_picking"/>
        <field name="state">code</field>
        <field name="name">Split</field>
    </record>
    <record id="survey.action_survey_print" model="ir.actions.server">
        <field name="binding_model_id" ref="survey.model_survey_survey"/>
        <field name="binding_view_types">form</field>
        <field name="code"><![CDATA[
if record:
        action = record.action_print_survey()
                ]]></field>
        <field name="model_id" ref="survey.model_survey_survey"/>
        <field name="state">code</field>
        <field name="name">Print Survey</field>
    </record>
    <record id="web.download_contact" model="ir.actions.server">
        <field name="binding_model_id" ref="base.model_res_partner"/>
        <field name="binding_view_types">form,list</field>
        <field name="code"><![CDATA[
                        action = {
                                'type': 'ir.actions.act_url',
                                'url': '/web/partner/vcard?partner_ids=' + ','.join(map(str, records.ids)),
                                'target': 'download',
                        }
                ]]></field>
        <field name="model_id" ref="base.model_res_partner"/>
        <field name="state">code</field>
        <field name="name">Download (vCard)</field>
    </record>
    <record id="website.ir_actions_server_website_analytics" model="ir.actions.server">
        <field name="code"><![CDATA[action = model.env.ref('website.backend_dashboard').sudo().read()[0]]]></field>
        <field name="model_id" ref="website.model_website"/>
        <field name="state">code</field>
        <field name="name">Website: Analytics</field>
    </record>
    <record id="website.ir_actions_server_website_dashboard" model="ir.actions.server">
        <field name="code"><![CDATA[action = model.action_dashboard_redirect()]]></field>
        <field name="model_id" ref="website.model_website"/>
        <field name="state">code</field>
        <field name="name">Website: Dashboard</field>
    </record>
    <record id="website.website_disable_unused_snippets_assets_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._disable_unused_snippets_assets()]]></field>
        <field name="model_id" ref="website.model_website"/>
        <field name="state">code</field>
        <field name="name">Disable unused snippets assets</field>
    </record>
    <record id="website.website_visitor_cron_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._cron_unlink_old_visitors()]]></field>
        <field name="model_id" ref="website.model_website_visitor"/>
        <field name="state">code</field>
        <field name="name">Website Visitor : clean inactive visitors</field>
    </record>
    <record id="website_knowledge.knowledge_action_publish_articles" model="ir.actions.server">
        <field name="binding_model_id" ref="knowledge.model_knowledge_article"/>
        <field name="binding_view_types">list</field>
        <field name="code"><![CDATA[
                        records.write({'website_published': True})
                ]]></field>
        <field name="model_id" ref="knowledge.model_knowledge_article"/>
        <field name="state">code</field>
        <field name="name">Publish Articles</field>
    </record>
    <record id="website_knowledge.knowledge_action_unpublish_articles" model="ir.actions.server">
        <field name="binding_model_id" ref="knowledge.model_knowledge_article"/>
        <field name="binding_view_types">list</field>
        <field name="code"><![CDATA[
                        records.write({'website_published': False})
                ]]></field>
        <field name="model_id" ref="knowledge.model_knowledge_article"/>
        <field name="state">code</field>
        <field name="name">Unpublish Articles</field>
    </record>
    <record id="website_sale.dynamic_snippet_accessories_action" model="ir.actions.server">
        <field name="code"><![CDATA[
DynamicFilter = model.env['website.snippet.filter']
response = DynamicFilter._get_products('accessories', product_template_id=request.params.get('productTemplateId'))
                        ]]></field>
        <field name="model_id" ref="product.model_product_product"/>
        <field name="state">code</field>
        <field name="name">Product Accessories</field>
    </record>
    <record id="website_sale.dynamic_snippet_alternative_products" model="ir.actions.server">
        <field name="code"><![CDATA[
DynamicFilter = model.env['website.snippet.filter']
response = DynamicFilter._get_products('alternative_products', product_template_id=request.params.get('productTemplateId'))
                        ]]></field>
        <field name="model_id" ref="product.model_product_product"/>
        <field name="state">code</field>
        <field name="name">Alternative Products</field>
    </record>
    <record id="website_sale.dynamic_snippet_latest_sold_products_action" model="ir.actions.server">
        <field name="code"><![CDATA[
DynamicFilter = model.env['website.snippet.filter']
response = DynamicFilter._get_products('latest_sold')
                        ]]></field>
        <field name="model_id" ref="product.model_product_product"/>
        <field name="state">code</field>
        <field name="name">Recently Sold Products</field>
    </record>
    <record id="website_sale.dynamic_snippet_latest_viewed_products_action" model="ir.actions.server">
        <field name="code"><![CDATA[
DynamicFilter = model.env['website.snippet.filter']
res_products = DynamicFilter._get_products('latest_viewed')
for data in res_products:
        data['_latest_viewed'] = True
response = res_products
                        ]]></field>
        <field name="model_id" ref="product.model_product_product"/>
        <field name="state">code</field>
        <field name="name">Recently Viewed Products</field>
    </record>
    <record id="website_sale.dynamic_snippet_recently_sold_with_action" model="ir.actions.server">
        <field name="code"><![CDATA[
DynamicFilter = model.env['website.snippet.filter']
response = DynamicFilter._get_products('recently_sold_with', product_template_id=request.params.get('productTemplateId'))
                        ]]></field>
        <field name="model_id" ref="product.model_product_product"/>
        <field name="state">code</field>
        <field name="name">Products Recently Sold With</field>
    </record>
    <record id="website_sale.ir_actions_server_sale_cart_recovery_email" model="ir.actions.server">
        <field name="binding_model_id" ref="sale.model_sale_order"/>
        <field name="code"><![CDATA[
                        if records:
                                action = records.action_recovery_email_send()
                ]]></field>
        <field name="model_id" ref="sale.model_sale_order"/>
        <field name="state">code</field>
        <field name="name">Send a Cart Recovery Email</field>
    </record>
    <record id="website_sale.ir_cron_send_availability_email_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._send_abandoned_cart_email()]]></field>
        <field name="model_id" ref="website.model_website"/>
        <field name="state">code</field>
        <field name="name">eCommerce: send email to customers about their abandoned cart</field>
    </record>
    <record id="website_sale_stock.ir_cron_send_availability_email_ir_actions_server" model="ir.actions.server">
        <field name="code"><![CDATA[model._send_availability_email()]]></field>
        <field name="model_id" ref="product.model_product_product"/>
        <field name="state">code</field>
        <field name="name">Product: send email regarding products availability</field>
    </record>
</odoo>
